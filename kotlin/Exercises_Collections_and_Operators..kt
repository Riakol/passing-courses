package org.example

import java.util.LinkedList
import java.util.Queue
import kotlin.time.measureTime

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
fun main() {
    val list = listOf<String>("test", "list", "eagle", "test", "Car", "bus", "School", "sky")
    val listNums = listOf<Int>(5, 12, 435, 12, 456, 67, 3, 1, 10, 45, -45, 3, -1, 3 , 0 , 6)
    val listName1 = listOf<String>("Andrew", "Oleg", "Mark", "Sultan")
    val listName2 = listOf<String>("Grafield", "Oleg", "Mark", "Anthony")

    val people = mapOf(

        "Alice" to 25,

        "Bob" to 30,

        "Charlie" to 20,

        "David" to 25

    )

//    println(validateBrackets("( [ ]) { }"))

//    val bus = BusQueue()
//    bus.addPassenger("Andrew")
//    bus.addPassenger("Beric")
//    bus.addPassenger("Tom")
//    bus.addPassenger("Garry")
//    bus.addPassenger("Jim")
//    bus.addPassenger("Leo")
//    bus.addPassenger("Stan")
//    bus.boardBus()
//    println()
//    bus.boardBus()

}

// Task 1 –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (Set)
/*–£—Å–ª–æ–≤–∏–µ:
–î–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç—Ä–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.*/
fun getUniqueElements(list: List<String>) : Set<String> = list.toSet()

// Task 2 –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ (Map)
/*–£—Å–ª–æ–≤–∏–µ:
–î–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–ª–æ–≤. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map, –≥–¥–µ –∫–ª—é—á ‚Äî —ç—Ç–æ —Å–ª–æ–≤–æ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.*/
fun countingWords(list: List<String>) : Map<String, Int> = list.groupingBy { it }.eachCount()

// Task 3 –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ (List)
/*–£—Å–ª–æ–≤–∏–µ:
–î–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ.*/
fun getEvenNumbers(list: List<Int>) : List<Int> = list.filter { it % 2 == 0 }

// Task 4 –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤ (List + Set)
/*–î–∞–Ω—ã –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–Ω–∞ –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –≤ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–∞—Ö. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.*/
fun unionWithoutDuplicates(list1: List<String>, list2: List<String>) : List<String> = (list1 + list2).toSet().toList()

// Task 5 –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (List + Map)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ, –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤–µ—Ä–Ω–∏ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö.*/
fun getMostFrequentNumber(list: List<Int>): Int = list.groupingBy { it }.eachCount().maxBy { it.value }.key

// Task 6 –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (List ‚Üí Map)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç). –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É.*/
/*–ü—Ä–∏–º–µ—Ä:
data class Person(val name: String, val age: Int)

val people = listOf(
    Person("Alice", 25),
    Person("Bob", 30),
    Person("Charlie", 25),
    Person("David", 30),
    Person("Eve", 25)
)*/

fun groupByAge(list: List<Person>) : Map<Int, List<Person>> {
    return list.groupBy { it.age }
}

// Task 7 –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–∏—Å–∫–∞–º–∏ (List ‚Üí Set)
/*–î–∞–Ω—ã –¥–≤–∞ —Å–ø–∏—Å–∫–∞. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–º —Å–ø–∏—Å–∫–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Ç–æ—Ä–æ–º.*/
/*–ü—Ä–∏–º–µ—Ä:
val list1 = listOf(1, 2, 3, 4, 5)
val list2 = listOf(4, 5, 6, 7, 8)*/

// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3]
fun getDifference(list1: List<Int>, list2: List<Int>) : List<Int> = list1 - list2

// Task 8 –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å —É—Å–ª–æ–≤–∏–µ–º (List + flatMap)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è n.
–ü—Ä–∏–º–µ—Ä:

val listOfLists = listOf(
    listOf(1, 2, 3),
    listOf(4, 5, 6),
    listOf(7, 8, 9)
)

val n = 5*/
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [6, 7, 8, 9]
fun filterNumbersGreaterThanN(list: List<List<Int>>, n: Int): List<Int> = list.flatMap { it -> it.filter { it > n }}

// Task 9 –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–∞—Ö (List + Set)
/*–î–∞–Ω—ã —Ç—Ä–∏ —Å–ø–∏—Å–∫–∞. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ø–∏—Å–∫–∞—Ö.
–ü—Ä–∏–º–µ—Ä:
val list1 = listOf(1, 2, 3, 4, 5)
val list2 = listOf(4, 5, 6, 7, 8)
val list3 = listOf(5, 6, 7, 8, 9)*/

// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [5]
fun findCommonElements(list1: List<Int>, list2: List<Int>, list3: List<Int>) : List<Int> = list1.toSet().intersect(list2).intersect(list3).toList()

// Task 10 –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ Map –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (Map ‚Üí List)
/*–î–∞–Ω Map, –≥–¥–µ –∫–ª—é—á ‚Äî –∏–º—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –≤–æ–∑—Ä–∞—Å—Ç. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é).

val people = mapOf(
    "Alice" to 25,
    "Bob" to 30,
    "Charlie" to 20,
    "David" to 25

)*/

// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ["Charlie", "Alice", "David", "Bob"]
fun sortNamesByAge(map: Map<String, Int>) : List<String> = map.entries.sortedBy { it.value }.map { it.key }


// üîπ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç–µ–∫–∏
//Task 11 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫
/*–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∫–æ–±–∫–∏ (), [], {}. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–Ω–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã.
–ü—Ä–∏–º–µ—Ä—ã:
"( [ ] ) { }" ‚Üí true
"( [ ) ]" ‚Üí false*/

fun validateBrackets(str: String) : Boolean {
    val pairs = mapOf(')' to '(', ']' to '[', '}' to '{')
    val stack = mutableListOf<Char>()

    for (char in str.replace(" ", "")) {
        when (char) {
            in pairs.values -> stack.add(char)
            in pairs.keys -> {
                if (stack.isEmpty() || stack.removeAt(stack.lastIndex) != pairs[char]) {
                    return false
                }
            }
            else -> continue
        }
    }
    return stack.isEmpty()
}

//Task 12 –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é —Å—Ç–µ–∫–∞
/*–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –µ—ë, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–µ–∫.
–ü—Ä–∏–º–µ—Ä:

–í—Ö–æ–¥: "kotlin"
–í—ã—Ö–æ–¥: "niltok"*/

fun reverseStringUsingStack(text: String): String {
    val stack = mutableListOf<Char>()
    val reversedText = StringBuilder()
    text.forEach { stack.add(it) }

    while (stack.isNotEmpty()) reversedText.append(stack.removeAt(stack.lastIndex))
    return reversedText.toString()
}

//Task 13 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å –ø–æ–º–æ—â—å—é –æ—á–µ—Ä–µ–¥–∏ –∏ —Å—Ç–µ–∫–∞
/*–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ), –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–µ–∫ –∏ –æ—á–µ—Ä–µ–¥—å.

–ø—Ä–∏–º–µ—Ä:

–í—Ö–æ–¥: "racecar"
–í—ã—Ö–æ–¥: true

–í—Ö–æ–¥: "hello"
–í—ã—Ö–æ–¥: false*/

fun isPalindrome(s: String): Boolean {
    val stack = ArrayDeque<Char>() //LIFO
    val queue: Queue<Char> = LinkedList() //FIFO

    s.forEach {
        stack.add(it)
        queue.add(it)
    }

    while (stack.isNotEmpty() && queue.isNotEmpty()) {
        if (queue.poll() != stack.removeLast()) {
            return false
        }
    }
    return true
}

//Task 14 –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –∫–∞—Ñ–µ
/*–í –∫–∞—Ñ–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–∫–∞–∑—ã. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.

addOrder(order: String) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å.
processOrder() ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–≤—ã–≤–µ—Å—Ç–∏) —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.

–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å CafeQueue —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —ç—Ç–∏ –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –∏ –¥–∞–ª–µ–µ –∏–∑ main –µ–≥–æ –≤—ã–∑—ã–≤–∞—Ç—å

fun main() {
    val cafe = CafeQueue()
    cafe.addOrder("–ö–æ—Ñ–µ")
    cafe.addOrder("–ß–∞–π")
    println(cafe.processOrder()) // –ö–æ—Ñ–µ
    println(cafe.processOrder()) // –ß–∞–π
}*/

class CafeQueue {
    val queue: Queue<String> = LinkedList()

    fun addOrder(order: String) {
        queue.add(order)
    }

    fun processOrder(): String {
        return queue.poll()
    }
}

//Task 15 –°–∏–º—É–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–±—É—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
/*–ù–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–æ–∏—Ç –æ—á–µ—Ä–µ–¥—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. –ê–≤—Ç–æ–±—É—Å –∑–∞–±–∏—Ä–∞–µ—Ç —Å—Ä–∞–∑—É 3 —á–µ–ª–æ–≤–µ–∫–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ:

addPassenger(name: String) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
boardBus() ‚Äî –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫.*/

class BusQueue {
    val queue: Queue<String> = LinkedList()

    fun addPassenger(name: String) {
        queue.add(name)
    }

    fun boardBus() {
        if (queue.isNotEmpty() && queue.size >= 3) {
            for (passenger in 0..2) {
                println("${queue.poll()} got on the bus")
            }
        }
    }
}



// –ó–∞–¥–∞—á–∏ –Ω–∞ first() –∏ last()
// Task 16 –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –í–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ –ø–∞—Ä—ã. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –≤–µ—Ä–Ω–∏—Ç–µ null.*/
fun getFirstAndLastElements(list: List<Int>) : Pair<Int, Int>? {
    if (list.isEmpty()) return null
    return Pair(list.first(), list.last())
}

// Task 17 –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —á—ë—Ç–Ω—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ—á—ë—Ç–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º find)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —á—ë—Ç–Ω—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ—á—ë—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã.*/
fun findFirstEvenAndLastOdd(list: List<Int>) {
    val evenFirst = list.find { it % 2 == 0 }
    val evenLast = list.findLast { it % 2 == 0 }
    println(evenFirst)
    println(evenLast)
}



//–ó–∞–¥–∞—á–∏ –Ω–∞ take() –∏ drop()
// Task 18 –í–∑—è—Ç—å –ø–µ—Ä–≤—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å (take)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ —á–∏—Å–ª–æ N. –í–µ—Ä–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.*/
fun reverseFirstNElements(list: List<String>, n: Int): List<String> = list.take(n).reversed()

// Task 19 –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–µ K —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (drop)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ —á–∏—Å–ª–æ K. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–µ K —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è.*/
fun skipFirstKElements(list: List<Int>, k: Int): List<Int> = list.drop(k)

// Task 20 –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ (findLast)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–π–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.*/
fun findLastNegativeNumber(list: List<Int>): Int? = list.findLast { it < 0 }



// –ó–∞–¥–∞—á–∏ –Ω–∞ –º–µ—Ç–æ–¥ map()
// Task 21 –£–¥–≤–æ–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ (map)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ —É–º–Ω–æ–∂–µ–Ω–æ –Ω–∞ 2*/
fun doubleNumbersInList(list: List<Int>): List<Int> = list.map { it * 2 }

// Task 22 –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –∏—Ö –¥–ª–∏–Ω—ã(map)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–ª–∏–Ω —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫.*/
fun convertStringsToLengths(list: List<String>): List<Int> = list.map { it.length }

// Task 23 –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∏–∑ –¶–µ–ª—å—Å–∏—è –≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç (map)
/*–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∏—Ö –≤ –≥—Ä–∞–¥—É—Å—ã –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
F = C * 9/5 + 32.*/
fun convertCelsiusToFahrenheit(listCelsius: List<Int>): List<Int> = listCelsius.map { it * 9/5 + 32 }